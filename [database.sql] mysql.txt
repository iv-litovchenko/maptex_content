# -------------------------------------------------------------------
# Командная строка
# -------------------------------------------------------------------

// Прежде чем работать - нужно авторизоваться в MySQL и ввести пароль!!!
>> mysql -h 127.0.0.1 -u root -p
>> mysql -h localhost -u root -p
>> mysql -V
>> mysql --version

> show processlist;
> show databases;
> use database;
> show tables;

// mysqldump -u [username] -p [password] [database] [tables] > [dump_name.sql]
>> docker exec container_name /usr/bin/mysqldump -u root --password=rootpass db_name > /mnt/backup/db_name.sql

// mysql -u [username] -p [password] [database] < [dump_to_restore.sql]
>> docker exec -i <container_name> mysql -h 0.0.0.0 -P 3306 -uUser -pPassword db_name < db_18_07.sql

-- no-data (только структура)
-- no-create-info (только данные)
-- replace (вместо insert - если такая запись с таким ID-уже есть, он ее перезапишет)
-- where " " условаие выборки (так можно экспортировать строки в бэкап по нарастающей)

// Для Windows (команды, нужно запускать консоль от имени администратора)
>> net stop MySQL
>> net start MySQL

# -------------------------------------------------------------------
# my.ini, my.cnf (файл настроек)
# -------------------------------------------------------------------
- default-character-set=utf8
- character-set-server=utf8
- default-storage-engine=INNODB

# -------------------------------------------------------------------
# Операторы
# -------------------------------------------------------------------
// 0 vs NULL - нет данных в колонке (IS NULL, IS NOT NULL)
- 0-это значение, а null говорит, что в столбце ничего нет.
- WHERE EXISTS (вложенный запрос) // EXISTS ожидает получить хотя бы 1 строчку
- WHERE <>
- WHERE !=
- WHERE !>
- WHERE !<
- WHERE NOT
- WHERE AND
- WHERE ALL ANY BETWEEN IN LIKE OR SIME
- SELECT DISTINCT filed FROM table // показать только уникальные, текущ. строка сравнивается со след.
- ORDER BY ASC
- WHERE vs HAVING // фильтрация по существующим полям, фильтрация по сгенерированным полям (as)

# -------------------------------------------------------------------
# Отношения между таблицами (связи)
# -------------------------------------------------------------------
- 1 к 1
- 1 к М (М к 1)
- М к М // Промежуточная таблица (pivot - таблица соединения, пересечения)
// Промежуточная таблица по конвенции называется в алфавитном порядке из двух таблиц через "_"

# -------------------------------------------------------------------
# Схемы таблиц
# Ключи, индексы (правила для колонок)
# -------------------------------------------------------------------
// Индексы - это алфавитный указатель (мы говорим что по этому полю будем часто выбирать сортировать и фильтровать данные)
// InnoDB - данный тип таблиц постоянно следит за целостностью)

- (PK - primery) // первичный ключ - ID-записи (уникальный номер/ключ - идет совместно с UQ)
- (UQ - unique) // уникальное значение
- (AI - autoincrement) // увеличение ++ - увеличение счетчика, автоинкремент
- (Index) // просто индекс
- (FullText) // для больших текстов
- (FK+Index) // вторичный (внешний) ключ, ссылка на ID-записи внеш. таблицы (связь с другой таблицей)

- unsigned // только положительные числовые значения
- not null // не должно быть пустым значением - например заголовок поста

Связи и требования к внешним ключам (FK):
1) Тип таблицы должен быть: InnoDb
2) Типы колонок должны быть одинаковых типов (тип, длина, положительное или любое)

# -------------------------------------------------------------------
# Стратегия работы со связями на основе внешних ключей
# -------------------------------------------------------------------
1) Запретить удаление пока не будут удалены все ссылки
2) Убирать ссылку (FK ID=0)
3) Удалять запись вместе с удалением записи

# -------------------------------------------------------------------
# Стратегия оптимизации
# -------------------------------------------------------------------
1) Добавление индексов
2) Увеличение buffer pool size
3) Мониторить Slow(медленные)-запросы
4) Кэширование SQL-запросов