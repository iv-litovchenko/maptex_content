# -------------------------------------------------------------------
# Laravel
# -------------------------------------------------------------------

# -------------------------------------------------------------------
# Структура папок и файлов
# -------------------------------------------------------------------

Точкой входа для всех запросов к приложению Laravel является public/index.php-файл.
Все запросы направляются в этот файл конфигурацией вашего веб-сервера (Apache/Nginx).

В index.php загружается:
1) сгенерированное Composer определение автозагрузчика,
2) затем извлекает экземпляр приложения Laravel из bootstrap/app.php.
3) Первое действие, предпринимаемое самим Laravel, — создание экземпляра контейнера приложения/службы.
4) Затем входящий запрос отправляется либо в ядро HTTP, либо в ядро консоли,
в зависимости от типа запроса, поступающего в приложение.
Эти два ядра служат центральным расположением, через которое проходят все запросы.
Ядро HTTP, которое находится в app/Http/Kernel.php.
5). Ядро HTTP расширяет Illuminate\Foundation\Http\Kernelкласс,
который определяет массив bootstrappers который будет запущен до выполнения запроса.
 Эти загрузчики настраивают обработку ошибок, настраивают ведение журнала, определяют
 среду приложения и выполняют другие задачи, которые необходимо выполнить до фактической обработки запроса.
6) Ядро HTTP также определяет список промежуточного программного обеспечения ,
через которое должны пройти все запросы, прежде чем они будут обработаны приложением.
Эти промежуточные программы обрабатывают чтение и запись сеанса HTTP , определяют,
находится ли приложение в режиме обслуживания, проверяют токен CSRF и многое другое.
7) Сигнатура метода для ядра HTTP handleметод довольно прост: он получает Requestи возвращает Response.
Думайте о ядре как о большом черном ящике, представляющем все ваше приложение.
Отправьте ему HTTP-запросы, и он вернет HTTP-ответы.
8) Одним из наиболее важных действий по начальной загрузке ядра является загрузка поставщиков услуг для вашего приложения.
Поставщики услуг несут ответственность за начальную загрузку всех различных компонентов платформы,
таких как база данных, очередь, компоненты проверки и маршрутизации.
Все поставщики услуг для приложения настроены в config/app.php файл конфигурации providers множество.
Laravel будет перебирать этот список провайдеров и создавать экземпляры каждого из них. После создания экземпляров поставщиков registerметод будет вызываться для всех провайдеров. Затем, когда все провайдеры зарегистрированы, bootметод будет вызываться для каждого провайдера. Это сделано для того, чтобы поставщики услуг могли зависеть от того, будет ли каждая привязка контейнера зарегистрирована и доступна к тому времени, когда их bootметод выполняется.
По сути, каждая основная функция, предлагаемая Laravel, загружается и настраивается поставщиком услуг. Поскольку они загружают и настраивают так много функций, предлагаемых фреймворком, поставщики услуг являются наиболее важным аспектом всего процесса начальной загрузки Laravel.
9) Одним из наиболее важных поставщиков услуг в вашем приложении является App\Providers\RouteServiceProvider.
Этот поставщик услуг загружает файлы маршрутов, содержащиеся в вашем приложении. routesкаталог.
Давай, взломай RouteServiceProviderкод и посмотрите, как это работает!

После загрузки приложения и регистрации всех поставщиков услуг Requestбудут переданы маршрутизатору для отправки.
Маршрутизатор отправит запрос на маршрут или контроллер, а также запустит любое промежуточное ПО для конкретного маршрута.
Промежуточное ПО предоставляет удобный механизм фильтрации или проверки HTTP-запросов, поступающих в ваше приложение.
Как только метод маршрута или контроллера вернет ответ, ответ будет отправлен обратно через
промежуточное программное обеспечение маршрута, давая приложению возможность изменить или проверить исходящий ответ.

Наконец, как только ответ возвращается через промежуточное ПО, ядро HTTP handleметод возвращает
объект ответа и index.php файл вызывает sendметод возвращаемого ответа. В sendметод отправляет содержимое ответа в веб-браузер пользователя.

Поставщики услуг действительно являются ключом к начальной загрузке приложения Laravel. Экземпляр приложения создается, поставщики услуг регистрируются, и запрос передается загруженному приложению. Это действительно так просто!

Четкое понимание того, как приложение Laravel создается и загружается через поставщиков услуг, очень ценно. Поставщики услуг вашего приложения по умолчанию хранятся в app/Providersкаталог.

По умолчанию AppServiceProviderдовольно пусто. Этот провайдер — отличное место для добавления собственных
загрузочных и сервисных привязок вашего приложения. Для больших приложений вы можете создать несколько поставщиков
услуг, каждый из которых будет выполнять более точную загрузку определенных служб, используемых вашим приложением.

- app/ контроллеры, модели, провайдеры
- config/ настройки
- routes/ маршруты
- database/ информация о базе
- storage/ картинки, файлы
- .env (не загружается в git) - глобальные настройки проекта
----- APP_KEY - открытый ключ
----- APP_DEBUG - режим работы отладчика (true | false)
-----

# -------------------------------------------------------------------
# Новое в 9
# -------------------------------------------------------------------

// Улучшенные Eloquent Accessors/Mutators
use App\Support\Address;
use Illuminate\Database\Eloquent\Casts\Attribute;
public function address(): Attribute
{
    return new Attribute(
        get: fn ($value, $attributes) => new Address(
            $attributes['address_line_one'],
            $attributes['address_line_two'],
        ),
        set: fn (Address $value) => [
            'address_line_one' => $value->lineOne,
            'address_line_two' => $value->lineTwo,
        ],
    );
}

--

// Enum Eloquent Attribute Casting
protected $casts = [
    'status' => \App\Enums\ServerStatus\ServerStatus::class,
];
if ($server->status == ServerStatus::provisioned) {
    $server->status = ServerStatus::ready;
    $server->save();
}

--

// Неявные привязки маршрутов с перечислениями
enum Category: string
{
    case Fruits = 'fruits';
    case People = 'people';
}
Route::get('/categories/{category}', function (Category $category) {
    return $category->value;
});

// Принудительное определение области привязки маршрута
Route::get('/users/{user}/posts/{post:slug}', function (User $user, Post $post) {
    return $post;
});

--

// Новые директивы @checked, @disabledи @selectedBlade могут конфликтовать с одноименными событиями Vue.
// Вы можете использовать @@, чтобы избежать директив и избежать этого конфликта: @@selected.
@checked(old('active', $user->active)) />
@selected(old('version') == $version)>

--

// Полнотекстовые указатели / операторы Where
$table->text('bio')->fullText();
$table->text('bio')->fullText();
$users = DB::table('users')->whereFullText('bio', 'web developer')->get();

# -------------------------------------------------------------------
# Команды
# -------------------------------------------------------------------

$ php artisan about --only=environment
$ php artisan list make // доступные команды
$ php artisan storage:link  // создать символическую ссылку  на папку public/storage
$ php artisan test
$ php artisan test --coverage // тестовое покрытие с помощью Artisan
$ php artisan route:list

$ php artisan up // выключить режим обслуживания
$ php artisan down // включить режим обслуживания (resources/views/errors/503.blade.php), пока ваше приложение находится в режиме обслуживания, задания в очереди обрабатываться не будут.

# -------------------------------------------------------------------
# Очистка кэша
# -------------------------------------------------------------------

$ composer install --optimize-autoloader --no-dev // оптимизация на проде
$ php artisan route:cache
$ php artisan config:cache
$ php artisan view:cache
$ php artisan view:clear

# -------------------------------------------------------------------
# Классы, хелперы
# -------------------------------------------------------------------

$value = env('APP_DEBUG', false), // APP_DEBUG
$value = config('app.timezone', 'Asia/Seoul');

if (\Illuminate\Support\Facades\App::environment('local')) {}

\Log::useDailyFiles(storage_path().'/logs/name-of-log.log');
\Log::info('msg');

# -------------------------------------------------------------------
# Сервисный контейнер
# https://laravel.com/docs/9.x/container
# -------------------------------------------------------------------

---

# -------------------------------------------------------------------
# Разное
# -------------------------------------------------------------------

$ touch database/database.sqlite DB_CONNECTION=sqlite

# -------------------------------------------------------------------
# Инструменты для разработки динамического фронта (внешнего интерфейса)
# -------------------------------------------------------------------

https://laravel-livewire.com/
https://alpinejs.dev/
https://tailwindcss.com/
https://vitejs.dev/
https://jetstream.laravel.com/2.x/introduction.html

--
https://nextjs.org/
https://nuxtjs.org/


